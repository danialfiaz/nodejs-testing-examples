name: CI/CD Pipeline
on:
  pull_request:
    types: [opened, closed]
    branches:
      - master
  merge_group:
    

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'


      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm run basic-test
        #continue-on-error: false
        
      # - name: Set status if tests fail
      #   if: ${{ failure() }}
      #   uses: actions/github-script@v5
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       try {
      #         github.checks.create({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           name: 'Test',
      #           head_sha: context.sha,
      #           status: 'completed',
      #           conclusion: 'failure',
      #           completed_at: new Date().toISOString(),
      #           output: {
      #             title: 'Tests failed',
      #             summary: 'The test job failed. Please fix the issues before merging.',
      #           },
      #         })
      #       } catch (error) {
      #         core.setFailed('Failed to create GitHub check status: ' + error.message)
      #       }
  build:
    name: Build Image
    runs-on: ubuntu-latest
    #needs: test
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    # permissions:
    #     # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
    #   contents: write
    
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


    - name: Update values.yaml with new image tag
      run: |
        sed -i "s/^  tag:.*/  tag: ${{ github.sha }} /g" templates/values.yaml
        
    
    - name: Commit and push changes
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "Update image tag in values.yaml"
        commit_user_name: "danialfiaz"
        commit_user_email: "danialfiaz96@gmail.com"
        branch: master
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to AWS ECS
        uses: aws-actions/aws-ecs-deploy@v2
        with:
          cluster: your-ecs-cluster
          service: your-ecs-service
          images: your-docker-repo/image-name:latest
          run-task: true

  # merge-check:
  #   if: github.event_name == 'pull_request' && github.event.action == 'opened'
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check test status
  #       run: |
  #         if [ ${{ job.status }} != 'success' ]; then
  #           echo "Tests failed. Cannot merge the pull request."
  #           exit 1
  #         else
  #           echo "Tests passed. Ready to merge."
  #         fi

